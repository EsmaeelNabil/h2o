name: Create Release and Build Binary

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # Step 3: Cache Cargo registry and build
      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Step 4: Build the project with Cargo
      - name: Build with Cargo
        run: cargo build --release

      # Step 5: Create a unique version tag based on date and time
      - name: Set Release Tag
        id: set_tag
        run: |
          TAG=v$(date +'%Y%m%d%H%M%S')
          echo "TAG=$TAG" >> $GITHUB_ENV

      # Step 6: Create a new release on GitHub
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: false

      # Step 7: Upload the binary to the release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/h2o
          asset_name: h2o-${{ env.TAG }}
          asset_content_type: application/octet-stream